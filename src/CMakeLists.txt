message(STATUS "Configuring icpp...")

# c++
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED)

set(LLVM_LINK_COMPONENTS
  ${LLVM_TARGETS_TO_BUILD}
  Analysis
  CodeGen
  Core
  IPO
  AggressiveInstCombine
  InstCombine
  Instrumentation
  MC
  MCParser
  ObjCARCOpts
  Option
  ScalarOpts
  Support
  TargetParser
  TransformUtils
  Vectorize
)

# Support plugins.
if(CLANG_PLUGIN_SUPPORT)
  set(support_plugins SUPPORT_PLUGINS)
endif()

set(THIRD_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/../third)
set(LLVM_OBJDUMP_ROOT ${THIRD_ROOT}/llvm-project/llvm/tools/llvm-objdump)
set(CLANG_DRIVER_ROOT ${THIRD_ROOT}/llvm-project/clang/tools/driver)

execute_process(COMMAND ${CMAKE_COMMAND} -E copy
  ${CMAKE_CURRENT_SOURCE_DIR}/icpp-driver.cpp
  ${CMAKE_CURRENT_BINARY_DIR}/icpp-driver.cpp)

# generate interpretable object file
add_custom_command(
  OUTPUT icppiobj.pb.cc
  COMMAND ${CMAKE_BINARY_DIR}/third/protobuf/protoc 
    -I=${CMAKE_SOURCE_DIR}/proto --cpp_out=${CMAKE_CURRENT_BINARY_DIR} 
    ${CMAKE_SOURCE_DIR}/proto/icppiobj.proto
  DEPENDS ${CMAKE_SOURCE_DIR}/proto/icppiobj.proto
  VERBATIM)

# we have patched this macro to build an icpp shared library, 
# because of this, you can deploy icpp to any kind of runtime environment.
add_clang_tool(icpp
  arch.cpp
  compile.cpp
  debugger.cpp
  exec.cpp
  icpp-driver.cpp
  icpp-main.cpp
  icpp.cpp
  loader.cpp
  log.cpp
  object.cpp
  object-llvm.cpp
  platform.cpp
  profile.cpp
  runcfg.cpp
  runtime.cpp
  trace.cpp
  utils.cpp

  # auto generated by protoc
  icppiobj.pb.cc

  ${LLVM_OBJDUMP_ROOT}/SourcePrinter.cpp
  ${CLANG_DRIVER_ROOT}/driver.cpp
  ${CLANG_DRIVER_ROOT}/cc1_main.cpp
  ${CLANG_DRIVER_ROOT}/cc1as_main.cpp
  ${CLANG_DRIVER_ROOT}/cc1gen_reproducer_main.cpp
  ${CMAKE_BINARY_DIR}/vmpstudio/icppdbg.pb.cc
  
  PARTIAL_SOURCES_INTENDED

  DEPENDS
  intrinsics_gen
  # These generated headers are included transitively.
  ARMTargetParserTableGen
  AArch64TargetParserTableGen
  ${support_plugins}
  GENERATE_DRIVER
)

clang_target_link_libraries(icpp
  PRIVATE
  clangBasic
  clangCodeGen
  clangDriver
  clangFrontend
  clangFrontendTool
  clangSerialization

  unicorn
  boost_asio
  boost_beast
  libprotobuf
  breakpad-static
  brotlicommon
  brotlienc
  brotlidec
)
  
target_include_directories(icpp PRIVATE
  ${THIRD_ROOT}/llvm-project/llvm/include
  ${THIRD_ROOT}/llvm-project/clang/include
  ${LLVM_OBJDUMP_ROOT}
  ${THIRD_ROOT}/unicorn/include
  ${CMAKE_BINARY_DIR}
  ${CMAKE_BINARY_DIR}/third/llvm-project/llvm/include
  ${CMAKE_BINARY_DIR}/third/llvm-project/llvm/tools/clang/include
  ${CMAKE_BINARY_DIR}/vmpstudio
  ${CMAKE_CURRENT_BINARY_DIR}
  ${THIRD_ROOT}/breakpad/src
  ${THIRD_ROOT}/brotli/c/include

  boost_asio
  boost_beast
  libprotobuf
)

if(APPLE)
  target_link_options(icpp PRIVATE -Wl,-exported_symbol -Wl,_icpp_main)
endif()
if(LINUX)
  target_link_options(icpp PRIVATE -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/ld.version)
endif()

# llvm disabled rtti
if(WIN32 AND NOT CYGWIN)
  if (MSVC)
    target_compile_options(icpp PRIVATE /GR-)
  else()
    target_compile_options(icpp PRIVATE -fno-rtti)
  endif()
else()
  target_compile_options(icpp PRIVATE -fno-rtti)
  set_target_properties(icpp PROPERTIES VERSION ${CLANG_EXECUTABLE_VERSION})
endif()

# remove lib prefix on macOS/Linux
set_target_properties(icpp PROPERTIES PREFIX "")

add_dependencies(icpp clang-resource-headers)

# icpp command line
add_executable(icppcli icpp-cli.cpp)
set_target_properties(icppcli PROPERTIES OUTPUT_NAME "icpp")
target_include_directories(icppcli PRIVATE 
  ${CMAKE_BINARY_DIR}/third/llvm-project/llvm/include
  boost_dll
)
target_link_libraries(icppcli PRIVATE boost_dll)

message(STATUS "Configuring icpp done")
